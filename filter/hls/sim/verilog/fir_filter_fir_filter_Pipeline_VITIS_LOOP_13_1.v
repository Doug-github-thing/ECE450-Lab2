// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fir_filter_fir_filter_Pipeline_VITIS_LOOP_13_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        shift_reg_0,
        shift_reg_0_ap_vld,
        shift_reg_1,
        shift_reg_1_ap_vld,
        shift_reg_2,
        shift_reg_2_ap_vld,
        shift_reg_3,
        shift_reg_3_ap_vld,
        shift_reg_4,
        shift_reg_4_ap_vld,
        shift_reg_5,
        shift_reg_5_ap_vld,
        shift_reg_6,
        shift_reg_6_ap_vld,
        shift_reg_7,
        shift_reg_7_ap_vld,
        shift_reg_8,
        shift_reg_8_ap_vld,
        shift_reg_9,
        shift_reg_9_ap_vld,
        shift_reg_10,
        shift_reg_10_ap_vld,
        shift_reg_11,
        shift_reg_11_ap_vld,
        shift_reg_12,
        shift_reg_12_ap_vld,
        shift_reg_13,
        shift_reg_13_ap_vld,
        shift_reg_14,
        shift_reg_14_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] shift_reg_0;
output   shift_reg_0_ap_vld;
output  [31:0] shift_reg_1;
output   shift_reg_1_ap_vld;
output  [31:0] shift_reg_2;
output   shift_reg_2_ap_vld;
output  [31:0] shift_reg_3;
output   shift_reg_3_ap_vld;
output  [31:0] shift_reg_4;
output   shift_reg_4_ap_vld;
output  [31:0] shift_reg_5;
output   shift_reg_5_ap_vld;
output  [31:0] shift_reg_6;
output   shift_reg_6_ap_vld;
output  [31:0] shift_reg_7;
output   shift_reg_7_ap_vld;
output  [31:0] shift_reg_8;
output   shift_reg_8_ap_vld;
output  [31:0] shift_reg_9;
output   shift_reg_9_ap_vld;
output  [31:0] shift_reg_10;
output   shift_reg_10_ap_vld;
output  [31:0] shift_reg_11;
output   shift_reg_11_ap_vld;
output  [31:0] shift_reg_12;
output   shift_reg_12_ap_vld;
output  [31:0] shift_reg_13;
output   shift_reg_13_ap_vld;
output  [31:0] shift_reg_14;
output   shift_reg_14_ap_vld;

reg ap_idle;
reg shift_reg_0_ap_vld;
reg shift_reg_1_ap_vld;
reg shift_reg_2_ap_vld;
reg shift_reg_3_ap_vld;
reg shift_reg_4_ap_vld;
reg shift_reg_5_ap_vld;
reg shift_reg_6_ap_vld;
reg shift_reg_7_ap_vld;
reg shift_reg_8_ap_vld;
reg shift_reg_9_ap_vld;
reg shift_reg_10_ap_vld;
reg shift_reg_11_ap_vld;
reg shift_reg_12_ap_vld;
reg shift_reg_13_ap_vld;
reg shift_reg_14_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln13_fu_96_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] trunc_ln13_fu_108_p1;
reg   [4:0] k_fu_84;
wire   [4:0] add_ln13_fu_102_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_k_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 k_fu_84 = 5'd0;
#0 ap_done_reg = 1'b0;
end

fir_filter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln13_fu_96_p2 == 1'd0)) begin
            k_fu_84 <= add_ln13_fu_102_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_84 <= 5'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_96_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_k_1 = k_fu_84;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd0) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_0_ap_vld = 1'b1;
    end else begin
        shift_reg_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd10) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_10_ap_vld = 1'b1;
    end else begin
        shift_reg_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd11) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_11_ap_vld = 1'b1;
    end else begin
        shift_reg_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd12) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_12_ap_vld = 1'b1;
    end else begin
        shift_reg_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd13) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_13_ap_vld = 1'b1;
    end else begin
        shift_reg_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd14) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_14_ap_vld = 1'b1;
    end else begin
        shift_reg_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd1) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_1_ap_vld = 1'b1;
    end else begin
        shift_reg_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd2) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_2_ap_vld = 1'b1;
    end else begin
        shift_reg_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd3) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_3_ap_vld = 1'b1;
    end else begin
        shift_reg_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd4) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_4_ap_vld = 1'b1;
    end else begin
        shift_reg_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd5) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_5_ap_vld = 1'b1;
    end else begin
        shift_reg_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd6) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_6_ap_vld = 1'b1;
    end else begin
        shift_reg_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd7) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_7_ap_vld = 1'b1;
    end else begin
        shift_reg_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd8) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_8_ap_vld = 1'b1;
    end else begin
        shift_reg_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln13_fu_108_p1 == 4'd9) & (icmp_ln13_fu_96_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg_9_ap_vld = 1'b1;
    end else begin
        shift_reg_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_102_p2 = (ap_sig_allocacmp_k_1 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln13_fu_96_p2 = ((ap_sig_allocacmp_k_1 == 5'd16) ? 1'b1 : 1'b0);

assign shift_reg_0 = 32'd0;

assign shift_reg_1 = 32'd0;

assign shift_reg_10 = 32'd0;

assign shift_reg_11 = 32'd0;

assign shift_reg_12 = 32'd0;

assign shift_reg_13 = 32'd0;

assign shift_reg_14 = 32'd0;

assign shift_reg_2 = 32'd0;

assign shift_reg_3 = 32'd0;

assign shift_reg_4 = 32'd0;

assign shift_reg_5 = 32'd0;

assign shift_reg_6 = 32'd0;

assign shift_reg_7 = 32'd0;

assign shift_reg_8 = 32'd0;

assign shift_reg_9 = 32'd0;

assign trunc_ln13_fu_108_p1 = ap_sig_allocacmp_k_1[3:0];

endmodule //fir_filter_fir_filter_Pipeline_VITIS_LOOP_13_1
