-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_filter_fir_filter,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.207000,HLS_SYN_LAT=263,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1817,HLS_SYN_LUT=873,HLS_VERSION=2025_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal empty_7_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_7_reg_114_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_7_reg_114_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_8_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_9_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_10_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_10_reg_146_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_10_reg_146_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_10_reg_146_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_11_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_12_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_12_reg_168_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_13_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_14_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_15_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_16_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_17_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_5_reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_6_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln13_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_619 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal zext_ln13_reg_619_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_619_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_619_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_619_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_reg_619_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln13_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_629_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_629_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_629_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_load_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal in_r_load_reg_633_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_load_reg_633_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_load_reg_633_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_19_fu_355_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_19_reg_640 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_19_reg_640_pp0_iter2_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp32_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3415_fu_365_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp3415_reg_650 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp3415_reg_650_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp3415_reg_650_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp3415_reg_650_pp0_iter4_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp29_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp29_reg_655 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3017_fu_407_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp3017_reg_660 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp33_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_3_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_3_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_4_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_4_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_phi_mux_empty_7_phi_fu_117_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_empty_9_phi_fu_139_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_13_phi_fu_183_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_15_phi_fu_205_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_17_phi_fu_227_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_5_phi_fu_237_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i1_fu_80 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_r_ce0_local : STD_LOGIC;
    signal out_r_we0_local : STD_LOGIC;
    signal out_r_ce0_local : STD_LOGIC;
    signal trunc_ln13_1_fu_351_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln13_fu_347_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_371_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_18_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg10_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_20_fu_403_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp1_fu_417_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_2_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_434_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_1_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_filter_mul_32s_3s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_3s_32_2_1_U1 : component fir_filter_mul_32s_3s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp32_reg_645,
        din1 => grp_fu_371_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_371_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_10_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_10_reg_146 <= empty_11_reg_157;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_10_reg_146 <= shift_reg_7;
            end if; 
        end if;
    end process;

    empty_11_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_11_reg_157 <= empty_12_reg_168;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_11_reg_157 <= shift_reg_6;
            end if; 
        end if;
    end process;

    empty_12_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_12_reg_168 <= empty_13_reg_179;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_12_reg_168 <= shift_reg_5;
            end if; 
        end if;
    end process;

    empty_13_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_13_reg_179 <= empty_14_reg_190;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_13_reg_179 <= shift_reg_4;
            end if; 
        end if;
    end process;

    empty_14_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_14_reg_190 <= empty_15_reg_201;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_14_reg_190 <= shift_reg_3;
            end if; 
        end if;
    end process;

    empty_15_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_15_reg_201 <= empty_16_reg_212;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_15_reg_201 <= shift_reg_2;
            end if; 
        end if;
    end process;

    empty_16_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_16_reg_212 <= empty_17_reg_223;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_16_reg_212 <= shift_reg_1;
            end if; 
        end if;
    end process;

    empty_17_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_17_reg_223 <= in_r_load_reg_633;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_17_reg_223 <= shift_reg_0;
            end if; 
        end if;
    end process;

    empty_5_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter3_reg = ap_const_lv1_0))) then 
                empty_5_reg_234 <= empty_6_reg_244;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_5_reg_234 <= shift_reg_12;
            end if; 
        end if;
    end process;

    empty_6_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter3_reg = ap_const_lv1_0))) then 
                empty_6_reg_244 <= empty_7_reg_114_pp0_iter3_reg;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_6_reg_244 <= shift_reg_11;
            end if; 
        end if;
    end process;

    empty_7_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_7_reg_114 <= empty_8_reg_124;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_7_reg_114 <= shift_reg_10;
            end if; 
        end if;
    end process;

    empty_8_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_8_reg_124 <= empty_9_reg_135;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_8_reg_124 <= shift_reg_9;
            end if; 
        end if;
    end process;

    empty_9_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
                empty_9_reg_135 <= empty_10_reg_146;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_9_reg_135 <= shift_reg_8;
            end if; 
        end if;
    end process;

    empty_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_fu_84 <= shift_reg_13;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                empty_fu_84 <= ap_phi_mux_empty_5_phi_fu_237_p4;
            end if; 
        end if;
    end process;

    i1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i1_fu_80 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i1_fu_80 <= i_fu_330_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln29_3_reg_670 <= add_ln29_3_fu_429_p2;
                add_ln29_4_reg_675 <= add_ln29_4_fu_452_p2;
                empty_10_reg_146_pp0_iter2_reg <= empty_10_reg_146;
                empty_10_reg_146_pp0_iter3_reg <= empty_10_reg_146_pp0_iter2_reg;
                empty_10_reg_146_pp0_iter4_reg <= empty_10_reg_146_pp0_iter3_reg;
                empty_12_reg_168_pp0_iter2_reg <= empty_12_reg_168;
                empty_19_reg_640_pp0_iter2_reg <= empty_19_reg_640;
                empty_7_reg_114_pp0_iter2_reg <= empty_7_reg_114;
                empty_7_reg_114_pp0_iter3_reg <= empty_7_reg_114_pp0_iter2_reg;
                icmp_ln13_reg_629_pp0_iter2_reg <= icmp_ln13_reg_629_pp0_iter1_reg;
                icmp_ln13_reg_629_pp0_iter3_reg <= icmp_ln13_reg_629_pp0_iter2_reg;
                in_r_load_reg_633_pp0_iter2_reg <= in_r_load_reg_633;
                in_r_load_reg_633_pp0_iter3_reg <= in_r_load_reg_633_pp0_iter2_reg;
                in_r_load_reg_633_pp0_iter4_reg <= in_r_load_reg_633_pp0_iter3_reg;
                tmp29_reg_655 <= tmp29_fu_397_p2;
                tmp3017_reg_660 <= tmp3017_fu_407_p2;
                tmp33_reg_665 <= grp_fu_371_p2;
                tmp3415_reg_650_pp0_iter2_reg <= tmp3415_reg_650;
                tmp3415_reg_650_pp0_iter3_reg <= tmp3415_reg_650_pp0_iter2_reg;
                tmp3415_reg_650_pp0_iter4_reg <= tmp3415_reg_650_pp0_iter3_reg;
                    zext_ln13_reg_619_pp0_iter2_reg(7 downto 0) <= zext_ln13_reg_619_pp0_iter1_reg(7 downto 0);
                    zext_ln13_reg_619_pp0_iter3_reg(7 downto 0) <= zext_ln13_reg_619_pp0_iter2_reg(7 downto 0);
                    zext_ln13_reg_619_pp0_iter4_reg(7 downto 0) <= zext_ln13_reg_619_pp0_iter3_reg(7 downto 0);
                    zext_ln13_reg_619_pp0_iter5_reg(7 downto 0) <= zext_ln13_reg_619_pp0_iter4_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_19_reg_640 <= empty_19_fu_355_p1;
                icmp_ln13_reg_629 <= icmp_ln13_fu_336_p2;
                icmp_ln13_reg_629_pp0_iter1_reg <= icmp_ln13_reg_629;
                tmp32_reg_645 <= tmp32_fu_359_p2;
                tmp3415_reg_650 <= tmp3415_fu_365_p2;
                    zext_ln13_reg_619(7 downto 0) <= zext_ln13_fu_325_p1(7 downto 0);
                    zext_ln13_reg_619_pp0_iter1_reg(7 downto 0) <= zext_ln13_reg_619(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                in_r_load_reg_633 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                shift_reg_0 <= in_r_load_reg_633;
                shift_reg_1 <= empty_17_reg_223;
                shift_reg_10 <= empty_8_reg_124;
                shift_reg_11 <= empty_7_reg_114;
                shift_reg_12 <= empty_6_reg_244;
                shift_reg_13 <= empty_5_reg_234;
                shift_reg_2 <= empty_16_reg_212;
                shift_reg_3 <= empty_15_reg_201;
                shift_reg_4 <= empty_14_reg_190;
                shift_reg_5 <= empty_13_reg_179;
                shift_reg_6 <= empty_12_reg_168;
                shift_reg_7 <= empty_11_reg_157;
                shift_reg_8 <= empty_10_reg_146;
                shift_reg_9 <= empty_9_reg_135;
            end if;
        end if;
    end process;
    zext_ln13_reg_619(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_619_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_619_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_619_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_619_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_619_pp0_iter5_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln29_1_fu_447_p2 <= std_logic_vector(unsigned(add_ln29_fu_441_p2) + unsigned(in_r_load_reg_633_pp0_iter4_reg));
    add_ln29_2_fu_424_p2 <= std_logic_vector(unsigned(tmp1_fu_417_p3) + unsigned(tmp29_reg_655));
    add_ln29_3_fu_429_p2 <= std_logic_vector(unsigned(add_ln29_2_fu_424_p2) + unsigned(tmp33_reg_665));
    add_ln29_4_fu_452_p2 <= std_logic_vector(unsigned(add_ln29_3_reg_670) + unsigned(add_ln29_1_fu_447_p2));
    add_ln29_fu_441_p2 <= std_logic_vector(unsigned(tmp2_fu_434_p3) + unsigned(empty_10_reg_146_pp0_iter4_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln13_fu_336_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_fu_336_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_13_phi_fu_183_p4_assign_proc : process(empty_13_reg_179, empty_14_reg_190, icmp_ln13_reg_629_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_13_phi_fu_183_p4 <= empty_14_reg_190;
        else 
            ap_phi_mux_empty_13_phi_fu_183_p4 <= empty_13_reg_179;
        end if; 
    end process;


    ap_phi_mux_empty_15_phi_fu_205_p4_assign_proc : process(empty_15_reg_201, empty_16_reg_212, icmp_ln13_reg_629_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_15_phi_fu_205_p4 <= empty_16_reg_212;
        else 
            ap_phi_mux_empty_15_phi_fu_205_p4 <= empty_15_reg_201;
        end if; 
    end process;


    ap_phi_mux_empty_17_phi_fu_227_p4_assign_proc : process(empty_17_reg_223, icmp_ln13_reg_629_pp0_iter1_reg, in_r_load_reg_633, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_17_phi_fu_227_p4 <= in_r_load_reg_633;
        else 
            ap_phi_mux_empty_17_phi_fu_227_p4 <= empty_17_reg_223;
        end if; 
    end process;


    ap_phi_mux_empty_5_phi_fu_237_p4_assign_proc : process(empty_5_reg_234, empty_6_reg_244, icmp_ln13_reg_629_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter3_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_5_phi_fu_237_p4 <= empty_6_reg_244;
        else 
            ap_phi_mux_empty_5_phi_fu_237_p4 <= empty_5_reg_234;
        end if; 
    end process;


    ap_phi_mux_empty_7_phi_fu_117_p4_assign_proc : process(empty_7_reg_114, empty_8_reg_124, icmp_ln13_reg_629_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_7_phi_fu_117_p4 <= empty_8_reg_124;
        else 
            ap_phi_mux_empty_7_phi_fu_117_p4 <= empty_7_reg_114;
        end if; 
    end process;


    ap_phi_mux_empty_9_phi_fu_139_p4_assign_proc : process(empty_9_reg_135, empty_10_reg_146, icmp_ln13_reg_629_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln13_reg_629_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_9_phi_fu_139_p4 <= empty_10_reg_146;
        else 
            ap_phi_mux_empty_9_phi_fu_139_p4 <= empty_9_reg_135;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_18_fu_385_p2 <= std_logic_vector(shift_left(unsigned(tmp_fu_379_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    empty_19_fu_355_p1 <= ap_phi_mux_empty_13_phi_fu_183_p4(30 - 1 downto 0);
    empty_20_fu_403_p1 <= ap_phi_mux_empty_5_phi_fu_237_p4(30 - 1 downto 0);
    grp_fu_371_p1 <= ap_const_lv32_FFFFFFFD(3 - 1 downto 0);
    i_fu_330_p2 <= std_logic_vector(unsigned(i1_fu_80) + unsigned(ap_const_lv8_1));
    icmp_ln13_fu_336_p2 <= "1" when (i1_fu_80 = ap_const_lv8_FF) else "0";
    in_r_address0 <= zext_ln13_fu_325_p1(8 - 1 downto 0);
    in_r_ce0 <= in_r_ce0_local;

    in_r_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            in_r_ce0_local <= ap_const_logic_1;
        else 
            in_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_r_address0 <= zext_ln13_reg_619_pp0_iter5_reg(8 - 1 downto 0);
    out_r_ce0 <= out_r_ce0_local;

    out_r_ce0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_r_ce0_local <= ap_const_logic_1;
        else 
            out_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= add_ln29_4_reg_675;
    out_r_we0 <= out_r_we0_local;

    out_r_we0_local_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_r_we0_local <= ap_const_logic_1;
        else 
            out_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_neg10_fu_391_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(empty_18_fu_385_p2));
    tmp1_fu_417_p3 <= (tmp3017_reg_660 & ap_const_lv2_0);
    tmp29_fu_397_p2 <= std_logic_vector(unsigned(p_neg10_fu_391_p2) - unsigned(tmp_fu_379_p2));
    tmp2_fu_434_p3 <= (tmp3415_reg_650_pp0_iter4_reg & ap_const_lv1_0);
    tmp3017_fu_407_p2 <= std_logic_vector(unsigned(empty_20_fu_403_p1) + unsigned(empty_19_reg_640_pp0_iter2_reg));
    tmp32_fu_359_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_7_phi_fu_117_p4) + unsigned(ap_phi_mux_empty_15_phi_fu_205_p4));
    tmp3415_fu_365_p2 <= std_logic_vector(unsigned(trunc_ln13_1_fu_351_p1) - unsigned(trunc_ln13_fu_347_p1));
    tmp_fu_379_p2 <= std_logic_vector(unsigned(empty_fu_84) + unsigned(empty_12_reg_168_pp0_iter2_reg));
    trunc_ln13_1_fu_351_p1 <= ap_phi_mux_empty_17_phi_fu_227_p4(31 - 1 downto 0);
    trunc_ln13_fu_347_p1 <= ap_phi_mux_empty_9_phi_fu_139_p4(31 - 1 downto 0);
    zext_ln13_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_fu_80),64));
end behav;
